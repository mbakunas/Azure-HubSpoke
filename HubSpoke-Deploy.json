{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "assetLocationURI": {
            "type": "string",
            "metadata": {
                "description": "Publicly accessible location of the child ARM templates."
            }
        },
        "hubVnetName": {
            "type": "string",
            "metadata": {
                "description": "Name of the hub VNet."
            }
        },
        "hubVnetAddressSpace": {
            "type": "string",
            "metadata": {
                "description": "Address space of the hub VNet in CIDR notation."
            }
        },
        "hubSubnetGatewayAddressSpace": {
            "type": "string",
            "metadata": {
                "description": "Address space of the hub gateway subnet in CIDR notation."
            }
        },
        "hubSubnetFirewallAddressSpace": {
            "type": "string",
            "metadata": {
                "description": "Address space of the hub Azure Firewall subnet in CIDR notation.  Enter 0.0.0.0/0 not to deploy the Azure Firewall."
            },
            "defaultValue": "0.0.0.0/0"
        },
        "useFirewallForEgress": {
            "type": "string",
            "metadata": {
                "description": "Force all egress Internet traffic through the Azure Firewall."
            },
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue":"Yes"
        },
        "routeTableName": {
            "type": "string",
            "metadata": {
                "description": "Name for the route tables used to direct traffic to the Azure Firewall."
            }
        },
        "hubSubnetBastionAddressSpace": {
            "type": "string",
            "metadata": {
                "description": "Address space of the hub Azure Bastion subnet in CIDR notation.  Enter 0.0.0.0/0 not to deploy the Azure Bastion."
            },
            "defaultValue": "0.0.0.0/0"
        },
        "hubSubnetDcName": {
            "type": "string",
            "metadata": {
                "description": "Name of the subnet housing the domain controllers.  The address space of this subnet will be appended to the value entered here."
            }
        },
        "hubSubnetDcAddressSpace": {
            "type": "string",
            "metadata": {
                "description": "Address space of the subnet housing the domain controllers in CIDR notation."
            }
        },
        "hubSubnetJumpHostsName": {
            "type": "string",
            "metadata": {
                "description": "Name of the subnet housing the jump hosts.  The address space of this subnet will be appended to the value entered here."
            },
            "defaultValue": "JumpHosts"
        },
        "hubSubnetJumpHostsAddressSpace": {
            "type": "string",
            "metadata": {
                "description": "Address space of the subnet housing the jump hosts in CIDR notation.  Enter 0.0.0.0/0 not to create the jump hosts subnet."
            },
            "defaultValue": "0.0.0.0/0"
        },
        "hubSubnet1Name": {
            "type": "string",
            "metadata": {
                "description": "Name of the first additional subnet.  The address space of this subnet will be appended to the value entered here."
            },
            "defaultValue": "Subnet1"
        },
        "hubSubnet1AddressSpace": {
            "type": "string",
            "metadata": {
                "description": "Address space of the first additional subnet.  Enter 0.0.0.0/0 not to create this or any additional subnets."
            },
            "defaultValue": "0.0.0.0/0"
        },
        "hubSubnet2Name": {
            "type": "string",
            "metadata": {
                "description": "Name of the second additional subnet.  The address space of this subnet will be appended to the value entered here."
            },
            "defaultValue": "Subnet2"
        },
        "hubSubnet2AddressSpace": {
            "type": "string",
            "metadata": {
                "description": "Address space of the second additional subnet.  Enter 0.0.0.0/0 not to create this or any subsequent additional subnets."
            },
            "defaultValue": "0.0.0.0/0"
        },
        "hubSubnet3Name": {
            "type": "string",
            "metadata": {
                "description": "Name of the third additional subnet.  The address space of this subnet will be appended to the value entered here."
            },
            "defaultValue": "Subnet3"
        },
        "hubSubnet3AddressSpace": {
            "type": "string",
            "metadata": {
                "description": "Address space of the third additional subnet.  Enter 0.0.0.0/0 not to create this or any subsequent additional subnets."
            },
            "defaultValue": "0.0.0.0/0"
        },
        "hubSubnet4Name": {
            "type": "string",
            "metadata": {
                "description": "Name of the fourth additional subnet.  The address space of this subnet will be appended to the value entered here."
            },
            "defaultValue": "Subnet4"
        },
        "hubSubnet4AddressSpace": {
            "type": "string",
            "metadata": {
                "description": "Address space of the fourth additional subnet.  Enter 0.0.0.0/0 not to create this subnet."
            },
            "defaultValue": "0.0.0.0/0"
        },
        "spokeVnetName": {
            "type": "array"
        },
        "spokeVnetAddressSpace": {
            "type": "array"
        },
        "spokeDeploySubscriptionResourceGroup": {
            "type": "array",
            "defaultValue": []
        },
        "spokeSubnetAppGwName": {
            "type": "array"
        },
        "spokeSubnetAppGwAddressSpace": {
            "type": "array"
        },
        "spokeSubnetBastionAddressSpace": {
            "type": "array"
        },
        "spokeSubnet1Name": {
            "type": "array"
        },
        "spokeSubnet1AddressSpace": {
            "type": "array"
        },
        "spokeSubnet2Name": {
            "type": "array"
        },
        "spokeSubnet2AddressSpace": {
            "type": "array"
        },
        "spokeSubnet3Name": {
            "type": "array"
        },
        "spokeSubnet3AddressSpace": {
            "type": "array"
        }
    },
    "variables": {
        "deploymentName": "[deployment().Name]",
        "location": "[resourceGroup().location]",
        "templateLocationURI": "[concat(parameters('assetLocationURI'), 'Templates/')]",
        "deploymentName-prodRouteTable": "[concat(variables('deploymentName'), '-Network-ProdRouteTable')]",
        "deploymentName-prodRouteTable-Empty": "[concat(variables('deploymentName'), '-Network-ProdRouteTable-Empty')]",
        "deploymentName-hub": "[concat(variables('deploymentName'), '-Network-Hub')]",
        "deploymentName-Spoke": "[concat(variables('deploymentName'), '-Spoke-')]",
        "deploymentName-ipGroups": "[concat(variables('deploymentName'), '-Network-IpGroups')]",
        "deploymentName-bastion": "[concat(variables('deploymentName'), '-Network-Bastion')]",
        "deploymentName-firewall": "[concat(variables('deploymentName'), '-Network-Firewall')]",
        "subnet_DC_fullName": "[concat(parameters('hubSubnetDcName'),'-',replace(parameters('hubSubnetDcAddressSpace'),'/','-'))]",
        "subnet_JH_fullName": "[concat(parameters('hubSubnetJumpHostsName'),'-',replace(parameters('hubSubnetJumpHostsAddressSpace'),'/','-'))]",
        "subnet_1_fullName": "[concat(parameters('hubSubnet1Name'),'-',replace(parameters('hubSubnet1AddressSpace'),'/','-'))]",
        "subnet_2_fullName": "[concat(parameters('hubSubnet2Name'),'-',replace(parameters('hubSubnet2AddressSpace'),'/','-'))]",
        "subnet_3_fullName": "[concat(parameters('hubSubnet3Name'),'-',replace(parameters('hubSubnet3AddressSpace'),'/','-'))]",
        "subnet_4_fullName": "[concat(parameters('hubSubnet4Name'),'-',replace(parameters('hubSubnet4AddressSpace'),'/','-'))]",
        "nsg_DC_name": "[concat(variables('subnet_DC_fullName'),'-NSG')]",
        "nsg_JH_name": "[concat(variables('subnet_JH_fullName'),'-NSG')]",
        "nsg_1_name": "[concat(variables('subnet_1_fullName'),'-NSG')]",
        "nsg_2_name": "[concat(variables('subnet_2_fullName'),'-NSG')]",
        "nsg_3_name": "[concat(variables('subnet_3_fullName'),'-NSG')]",
        "nsg_4_name": "[concat(variables('subnet_4_fullName'),'-NSG')]",
        "firewallNetworkAddress": "[substring(parameters('hubSubnetFirewallAddressSpace'), 0, indexOf(parameters('hubSubnetFirewallAddressSpace'), '/'))]",
        "firewallPrivateAddress": "[concat(substring(variables('firewallNetworkAddress'), 0, add(lastindexOf(variables('firewallNetworkAddress'), '.'), 1)), string(add(int(last(split(variables('firewallNetworkAddress'), '.'))), 4)))]",
        "ipGroups-allAzure-name": "All-Azure-Networks",
        "ipGroups-hubVnet-name": "[parameters('hubVnetName')]",
        "ipgroups-hubSubnet-DCs-name": "[concat(parameters('hubVnetName'), '-', variables('subnet_DC_fullName'))]",
        "ipgroups-hubSubnet-JumpHosts-name": "[concat(parameters('hubVnetName'), '-', variables('subnet_JH_fullName'))]",
        "ipgroups-hubSubnet-1-name": "[concat(parameters('hubVnetName'), '-', variables('subnet_1_fullName'))]",
        "ipgroups-hubSubnet-2-name": "[concat(parameters('hubVnetName'), '-', variables('subnet_2_fullName'))]",
        "ipgroups-hubSubnet-3-name": "[concat(parameters('hubVnetName'), '-', variables('subnet_3_fullName'))]",
        "ipgroups-hubSubnet-4-name": "[concat(parameters('hubVnetName'), '-', variables('subnet_4_fullName'))]",
        "firewallName": "[concat(parameters('hubVnetName'), '-Firewall')]",
        "firewallIpName": "[concat(variables('firewallName'), '-IP')]",
        "firewallNetworkRuleCollectionName": "InfraAllowCollection",
        "firewallNetworkRuleCollectionPriority": 1000,
        "firewallApplicationRuleCollectionName": "InfraAllowCollection",
        "firewallApplicationRuleCollectionPriority": 1000
    },
    "functions": [
        {
            "namespace": "my",
            "members": {
                "subnetFullName": {
                    "parameters": [
                        {
                            "name": "name",
                            "type": "string"
                        },
                        {
                            "name": "addressSpace",
                            "type": "string"
                        }
                    ],
                    "output": {
                        "type": "string",
                        "value": "[concat(parameters('name'),'-',replace(parameters('addressSpace'),'/','-'))]"
                    }
                },
                "nsgName": {
                    "parameters": [
                        {
                            "name": "subnetName",
                            "type": "string"
                        }
                    ],
                    "output": {
                        "value": "[concat(parameters('subnetName'), '-NSG')]",
                        "type": "string"
                    }
                }
            }
        }
    ],
    "resources": [
        {
            "comments": "Deploys route table with route to Azure Firewall",
            "condition": "[and(not(equals(parameters('hubSubnetFirewallAddressSpace'), '0.0.0.0/0')), equals(parameters('useFirewallForEgress'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-06-01",
            "name": "[variables('deploymentName-prodRouteTable')]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('templateLocationURI'), 'HubSpoke-RouteTable.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "routeTables_name": {"value": "[parameters('routeTableName')]"},
                    "routeTables_nextHopIpAddress": {"value": "[variables('firewallPrivateAddress')]"}
                }
            }
        },
        {
            "comments": "Deploys route table with no routes",
            "condition": "[or(equals(parameters('hubSubnetFirewallAddressSpace'), '0.0.0.0/0'), equals(parameters('useFirewallForEgress'), 'No'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-06-01",
            "name": "[variables('deploymentName-prodRouteTable-Empty')]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('templateLocationURI'), 'HubSpoke-RouteTable-Empty.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "routeTables_name": {"value": "[parameters('routeTableName')]"}
                }
            }
        },
        {
            "comments": "Deploys the hub VNet",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-06-01",
            "name": "[variables('deploymentName-hub')]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentName-prodRouteTable'))]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentName-prodRouteTable-Empty'))]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('templateLocationURI'), 'HubSpoke-VNet-Hub.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "virtualNetwork_name": {"value": "[parameters('hubVnetName')]"},
                    "virtualNetwork_addressSpace": {"value": "[parameters('hubVnetAddressSpace')]"},
                    "subnet_gateway_addressSpace": {"value": "[parameters('hubSubnetGatewayAddressSpace')]"},
                    "subnet_firewall_addressSpace": {"value": "[parameters('hubSubnetFirewallAddressSpace')]"},
                    "subnet_bastion_addressSpace": {"value": "[parameters('hubSubnetBastionAddressSpace')]"},
                    "subnet_DC_name": {"value": "[variables('subnet_DC_fullName')]"},
                    "subnet_DC_addressSpace": {"value": "[parameters('hubSubnetDcAddressSpace')]"},
                    "nsg_DC_name": {"value": "[variables('nsg_DC_name')]"},
                    "subnet_JH_name": {"value": "[variables('subnet_JH_fullName')]"},
                    "subnet_JH_addressSpace": {"value": "[parameters('hubSubnetJumpHostsAddressSpace')]"},
                    "nsg_JH_name": {"value": "[variables('nsg_JH_name')]"},
                    "subnet_1_name": {"value": "[variables('subnet_1_fullName')]"},
                    "subnet_1_addressSpace": {"value": "[parameters('hubSubnet1AddressSpace')]"},
                    "nsg_1_name": {"value": "[variables('nsg_1_name')]"},
                    "subnet_2_name": {"value": "[variables('subnet_2_fullName')]"},
                    "subnet_2_addressSpace": {"value": "[parameters('hubSubnet2AddressSpace')]"},
                    "nsg_2_name": {"value": "[variables('nsg_2_name')]"},
                    "subnet_3_name": {"value": "[variables('subnet_3_fullName')]"},
                    "subnet_3_addressSpace": {"value": "[parameters('hubSubnet3AddressSpace')]"},
                    "nsg_3_name": {"value": "[variables('nsg_3_name')]"},
                    "subnet_4_name": {"value": "[variables('subnet_4_fullName')]"},
                    "subnet_4_addressSpace": {"value": "[parameters('hubSubnet4AddressSpace')]"},
                    "nsg_4_name": {"value": "[variables('nsg_4_name')]"},
                    "routeTableName": {"value": "[parameters('routeTableName')]"}
                }
            }
        },
        {
            "comments": "Deploys the spoke VNet(s)",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-06-01",
            "name": "[concat(variables('deploymentName-Spoke'),copyIndex(1))]",
            "subscriptionId": "[if(equals(length(parameters('spokeDeploySubscriptionResourceGroup')), 0), subscription().subscriptionId, if(equals(parameters('spokeDeploySubscriptionResourceGroup')[copyIndex()], ''), subscription().subscriptionId, split(parameters('spokeDeploySubscriptionResourceGroup')[copyIndex()], '/')[0]))]",
            "resourceGroup": "[if(equals(length(parameters('spokeDeploySubscriptionResourceGroup')), 0), resourceGroup().name, if(equals(parameters('spokeDeploySubscriptionResourceGroup')[copyIndex()], ''), resourceGroup().name, split(parameters('spokeDeploySubscriptionResourceGroup')[copyIndex()], '/')[1]))]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('templateLocationURI'), 'HubSpoke-VNet-Spoke.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "virtualNetwork_name": {"value": "[parameters('spokeVnetName')[copyIndex()]]"},
                    "virtualNetwork_addressSpace": {"value": "[parameters('spokeVnetAddressSpace')[copyIndex()]]"},
                    "subnet_bastion_addressSpace": {"value": "[if(and(equals(parameters('spokeSubnetBastionAddressSpace')[0], '0.0.0.0/0'), equals(length(parameters('spokeSubnetBastionAddressSpace')), 1)), '0.0.0.0/0', parameters('spokeSubnetBastionAddressSpace')[copyIndex()])]"},
                    "subnet_appGW_name": {"value": "[if(and(equals(parameters('spokeSubnetAppGwAddressSpace')[0], '0.0.0.0/0'), equals(length(parameters('spokeSubnetAppGwAddressSpace')), 1)), concat('Skip-SubnetAppGateway-', copyIndex()), my.subnetFullName(if(equals(length(parameters('spokeSubnetAppGwName')), 1), parameters('spokeSubnetAppGwName')[0], parameters('spokeSubnetAppGwName')[copyIndex()]), parameters('spokeSubnetAppGwAddressSpace')[copyIndex()]))]"},
                    "subnet_appGW_addressSpace": {"value": "[if(and(equals(parameters('spokeSubnetAppGwAddressSpace')[0], '0.0.0.0/0'), equals(length(parameters('spokeSubnetAppGwAddressSpace')), 1)), '0.0.0.0/0', parameters('spokeSubnetAppGwAddressSpace')[copyIndex()])]"},
                    "subnet_1_name": {"value": "[my.subnetFullName(if(equals(length(parameters('spokeSubnet1Name')), 1), parameters('spokeSubnet1Name')[0], parameters('spokeSubnet1Name')[copyIndex()]), parameters('spokeSubnet1AddressSpace')[copyIndex()])]"},
                    "subnet_1_addressSpace": {"value": "[parameters('spokeSubnet1AddressSpace')[copyIndex()]]"},
                    "nsg_1_name": {"value": "[my.nsgName(my.subnetFullName(if(equals(length(parameters('spokeSubnet1Name')), 1), parameters('spokeSubnet1Name')[0], parameters('spokeSubnet1Name')[copyIndex()]), parameters('spokeSubnet1AddressSpace')[copyIndex()]))]"},
                    "subnet_2_name": {"value": "[if(and(equals(parameters('spokeSubnet2AddressSpace')[0], '0.0.0.0/0'), equals(length(parameters('spokeSubnet2AddressSpace')), 1)), concat('Skip-Subnet2-', copyIndex()), my.subnetFullName(if(equals(length(parameters('spokeSubnet2Name')), 1), parameters('spokeSubnet2Name')[0], parameters('spokeSubnet2Name')[copyIndex()]), parameters('spokeSubnet2AddressSpace')[copyIndex()]))]"},
                    "subnet_2_addressSpace": {"value": "[if(and(equals(parameters('spokeSubnet2AddressSpace')[0], '0.0.0.0/0'), equals(length(parameters('spokeSubnet2AddressSpace')), 1)), '0.0.0.0/0', parameters('spokeSubnet2AddressSpace')[copyIndex()])]"},
                    "nsg_2_name": {"value": "[if(and(equals(parameters('spokeSubnet2AddressSpace')[0], '0.0.0.0/0'), equals(length(parameters('spokeSubnet2AddressSpace')), 1)), concat('Skip-Subnet2-', copyIndex(), '-NSG'), if(equals(parameters('spokeSubnet2AddressSpace')[copyIndex()], '0.0.0.0/0'), concat('Skip-Subnet2-', copyIndex(), '-NSG'), my.nsgName(my.subnetFullName(if(equals(length(parameters('spokeSubnet2Name')), 1), parameters('spokeSubnet2Name')[0], parameters('spokeSubnet2Name')[copyIndex()]), parameters('spokeSubnet2AddressSpace')[copyIndex()]))))]"},
                    "subnet_3_name": {"value": "[if(or(and(equals(parameters('spokeSubnet2AddressSpace')[0], '0.0.0.0/0'), equals(length(parameters('spokeSubnet2AddressSpace')), 1)), and(equals(parameters('spokeSubnet3AddressSpace')[0], '0.0.0.0/0'), equals(length(parameters('spokeSubnet3AddressSpace')), 1))), concat('Skip-Subnet3-', copyIndex()), if(or(equals(parameters('spokeSubnet2AddressSpace')[copyIndex()], '0.0.0.0/0'), equals(parameters('spokeSubnet3AddressSpace')[copyIndex()], '0.0.0.0/0')), concat('Skip-Subnet3-', copyIndex()), my.subnetFullName(if(equals(length(parameters('spokeSubnet3Name')), 1), parameters('spokeSubnet3Name')[0], parameters('spokeSubnet3Name')[copyIndex()]), parameters('spokeSubnet3AddressSpace')[copyIndex()])))]"},
                    "subnet_3_addressSpace": {"value": "[if(or(and(equals(parameters('spokeSubnet2AddressSpace')[0], '0.0.0.0/0'), equals(length(parameters('spokeSubnet2AddressSpace')), 1)), and(equals(parameters('spokeSubnet3AddressSpace')[0], '0.0.0.0/0'), equals(length(parameters('spokeSubnet3AddressSpace')), 1))), '0.0.0.0/0', if(equals(parameters('spokeSubnet2AddressSpace')[copyIndex()], '0.0.0.0/0'), '0.0.0.0/0', parameters('spokeSubnet3AddressSpace')[copyIndex()]))]"},
                    "nsg_3_name": {"value": "[if(or(and(equals(parameters('spokeSubnet2AddressSpace')[0], '0.0.0.0/0'), equals(length(parameters('spokeSubnet2AddressSpace')), 1)), and(equals(parameters('spokeSubnet3AddressSpace')[0], '0.0.0.0/0'), equals(length(parameters('spokeSubnet3AddressSpace')), 1))),  concat('Skip-Subnet3-', copyIndex(), '-NSG'), if(or(equals(parameters('spokeSubnet2AddressSpace')[copyIndex()], '0.0.0.0/0'), equals(parameters('spokeSubnet3AddressSpace')[copyIndex()], '0.0.0.0/0')),  concat('Skip-Subnet3-', copyIndex(), '-NSG'), my.nsgName(my.subnetFullName(if(equals(length(parameters('spokeSubnet3Name')), 1), parameters('spokeSubnet3Name')[0], parameters('spokeSubnet3Name')[copyIndex()]), parameters('spokeSubnet3AddressSpace')[copyIndex()]))))]"}
                }
            },
            "copy": {
                "name": "spokeLoop",
                "count": "[length(parameters('spokeVnetName'))]"
            }
        },
        {
            "comments": "Deploys the IP Groups representing each subnet",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-06-01",
            "name": "[variables('deploymentName-ipGroups')]",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {},
                    "resources": [
                        {
                            "type": "Microsoft.Network/ipGroups",
                            "apiVersion": "2020-05-01",
                            "name": "[variables('ipGroups-allAzure-name')]",
                            "location": "[variables('location')]",
                            "properties": {
                                "ipAddresses": [
                                    "[parameters('hubVnetAddressSpace')]"
                                ]
                            }
                        },
                        {
                            "type": "Microsoft.Network/ipGroups",
                            "apiVersion": "2020-05-01",
                            "name": "[variables('ipGroups-hubVnet-name')]",
                            "location": "[variables('location')]",
                            "properties": {
                                "ipAddresses": [
                                    "[parameters('hubVnetAddressSpace')]"
                                ]
                            }
                        },
                        {
                            "type": "Microsoft.Network/ipGroups",
                            "apiVersion": "2020-05-01",
                            "name": "[variables('ipgroups-hubSubnet-DCs-name')]",
                            "location": "[variables('location')]",
                            "properties": {
                                "ipAddresses": [
                                    "[parameters('hubSubnetDcAddressSpace')]"
                                ]
                            }
                        },
                        {
                            "condition": "[not(equals(parameters('hubSubnetJumpHostsAddressSpace'), '0.0.0.0/0'))]",
                            "type": "Microsoft.Network/ipGroups",
                            "apiVersion": "2020-05-01",
                            "name": "[variables('ipgroups-hubSubnet-JumpHosts-name')]",
                            "location": "[variables('location')]",
                            "properties": {
                                "ipAddresses": [
                                    "[parameters('hubSubnetJumpHostsAddressSpace')]"
                                ]
                            }
                        },
                        {
                            "condition": "[not(equals(parameters('hubSubnet1AddressSpace'), '0.0.0.0/0'))]",
                            "type": "Microsoft.Network/ipGroups",
                            "apiVersion": "2020-05-01",
                            "name": "[variables('ipgroups-hubSubnet-1-name')]",
                            "location": "[variables('location')]",
                            "properties": {
                                "ipAddresses": [
                                    "[parameters('hubSubnet1AddressSpace')]"
                                ]
                            }
                        },
                        {
                            "condition": "[and(not(equals(parameters('hubSubnet1AddressSpace'), '0.0.0.0/0')), not(equals(parameters('hubSubnet2AddressSpace'), '0.0.0.0/0')))]",
                            "type": "Microsoft.Network/ipGroups",
                            "apiVersion": "2020-05-01",
                            "name": "[variables('ipgroups-hubSubnet-2-name')]",
                            "location": "[variables('location')]",
                            "properties": {
                                "ipAddresses": [
                                    "[parameters('hubSubnet2AddressSpace')]"
                                ]
                            }
                        },
                        {
                            "condition": "[and(not(equals(parameters('hubSubnet1AddressSpace'), '0.0.0.0/0')), not(equals(parameters('hubSubnet2AddressSpace'), '0.0.0.0/0')), not(equals(parameters('hubSubnet3AddressSpace'), '0.0.0.0/0')))]",
                            "type": "Microsoft.Network/ipGroups",
                            "apiVersion": "2020-05-01",
                            "name": "[variables('ipgroups-hubSubnet-3-name')]",
                            "location": "[variables('location')]",
                            "properties": {
                                "ipAddresses": [
                                    "[parameters('hubSubnet3AddressSpace')]"
                                ]
                            }
                        },
                        {
                            "condition": "[and(not(equals(parameters('hubSubnet1AddressSpace'), '0.0.0.0/0')), not(equals(parameters('hubSubnet2AddressSpace'), '0.0.0.0/0')), not(equals(parameters('hubSubnet3AddressSpace'), '0.0.0.0/0')), not(equals(parameters('hubSubnet4AddressSpace'), '0.0.0.0/0')))]",
                            "type": "Microsoft.Network/ipGroups",
                            "apiVersion": "2020-05-01",
                            "name": "[variables('ipgroups-hubSubnet-4-name')]",
                            "location": "[variables('location')]",
                            "properties": {
                                "ipAddresses": [
                                    "[parameters('hubSubnet4AddressSpace')]"
                                ]
                            }
                        }
                    ]
                }
            }
        },
        {
            "comments": "Deploys the Azure Bastion to the hub VNet",
            "condition": "[not(equals(parameters('hubSubnetBastionAddressSpace'), '0.0.0.0/0'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-06-01",
            "dependsOn": [
                "[variables('deploymentName-hub')]"
            ],
            "name": "[variables('deploymentName-bastion')]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('templateLocationURI'), 'HubSpoke-Bastion.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "vnetName": {"value": "[parameters('hubVnetName')]"}
                }
            }
        },
        {
            "comments": "Deploys the Azure Firewall to the hub VNet",
            "condition": "[not(equals(parameters('hubSubnetFirewallAddressSpace'), '0.0.0.0/0'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-06-01",
            "dependsOn": [
                "[variables('deploymentName-hub')]"
            ],
            "name": "[variables('deploymentName-firewall')]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('templateLocationURI'), 'HubSpoke-Firewall.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "vnetName": {"value": "[parameters('hubVnetName')]"},
                    "firewallName": {"value": "[variables('firewallName')]"},
                    "firewallIpName": {"value": "[variables('firewallIpName')]"},
                    "allAzureIpGroupName": {"value": "[variables('ipGroups-allAzure-name')]"},
                    "netRuleCollName": {"value": "[variables('firewallNetworkRuleCollectionName')]"},
                    "netRuleCollPriority": {"value": "[variables('firewallNetworkRuleCollectionPriority')]"},
                    "appRuleCollName": {"value": "[variables('firewallApplicationRuleCollectionName')]"},
                    "appRuleCollPriority": {"value": "[variables('firewallApplicationRuleCollectionPriority')]"}
                }
            }
        }
    ],
    "outputs": {}
}